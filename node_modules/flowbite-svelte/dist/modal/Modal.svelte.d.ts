import { SvelteComponent } from "svelte";
import type { Dismissable, SizeType } from '../types';
declare const __propDef: {
    props: import("svelte/elements").HTMLAnchorAttributes & {
        tag?: string | undefined;
        color?: "gray" | "red" | "yellow" | "green" | "indigo" | "purple" | "pink" | "blue" | "light" | "dark" | "default" | "dropdown" | "navbar" | "navbarUl" | "form" | "primary" | "orange" | "none" | undefined;
        rounded?: boolean | undefined;
        border?: boolean | undefined;
        shadow?: boolean | undefined;
        transition?: ((node: HTMLElement, params: any) => import("svelte/transition").TransitionConfig) | undefined;
        params?: object | undefined;
        node?: HTMLElement | undefined;
        use?: import("svelte/action").Action<HTMLElement, any, Record<never, any>> | undefined;
        options?: object | undefined;
        class?: string | undefined;
        role?: string | undefined;
    } & Dismissable & {
        open?: boolean | undefined;
        title?: string | undefined;
        size?: SizeType | undefined;
        placement?: "top-left" | "top-center" | "top-right" | "center-left" | "center" | "center-right" | "bottom-left" | "bottom-center" | "bottom-right" | undefined;
        autoclose?: boolean | undefined;
        backdropClass?: string | undefined;
        defaultClass?: string | undefined;
        outsideclose?: boolean | undefined;
    };
    events: {
        wheel: WheelEvent;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        header: {};
        default: {};
        footer: {};
    };
};
export type ModalProps = typeof __propDef.props;
export type ModalEvents = typeof __propDef.events;
export type ModalSlots = typeof __propDef.slots;
/**
 * [Go to docs](https://flowbite-svelte.com/)
 * ## Props
 * @prop export let open: boolean = false;
 * @prop export let title: string = '';
 * @prop export let size: SizeType = 'md';
 * @prop export let placement: ModalPlacementType = 'center';
 * @prop export let autoclose: boolean = false;
 * @prop export let dismissable: boolean = true;
 * @prop export let backdropClass: string = 'fixed inset-0 z-40 bg-gray-900 bg-opacity-50 dark:bg-opacity-80';
 * @prop export let defaultClass: string = 'relative flex flex-col mx-auto';
 * @prop export let outsideclose: boolean = false;
 * @prop export let dialogClass: string = 'fixed top-0 left-0 right-0 h-modal md:inset-0 md:h-full z-50 w-full p-4 flex';
 */
export default class Modal extends SvelteComponent<ModalProps, ModalEvents, ModalSlots> {
}
export {};
//# sourceMappingURL=Modal.svelte.d.ts.map