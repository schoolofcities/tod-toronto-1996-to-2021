import { SvelteComponent } from "svelte";
import type { LinkType } from '../types';
declare const __propDef: {
    props: import("svelte/elements").HTMLAnchorAttributes & {
        tag?: string | undefined;
        color?: "gray" | "red" | "yellow" | "green" | "indigo" | "purple" | "pink" | "blue" | "light" | "dark" | "default" | "dropdown" | "navbar" | "navbarUl" | "form" | "primary" | "orange" | "none" | undefined;
        rounded?: boolean | undefined;
        border?: boolean | undefined;
        shadow?: boolean | undefined;
        transition?: ((node: HTMLElement, params: any) => import("svelte/transition").TransitionConfig) | undefined;
        params?: object | undefined;
        node?: HTMLElement | undefined;
        use?: import("svelte/action").Action<HTMLElement, any, Record<never, any>> | undefined;
        options?: object | undefined;
        class?: string | undefined;
        role?: string | undefined;
    } & {
        activeContent?: boolean | undefined;
        arrow?: boolean | undefined;
        offset?: number | undefined;
        placement?: import("@floating-ui/dom").Placement | undefined;
        trigger?: "click" | "hover" | undefined;
        triggeredBy?: string | undefined;
        reference?: string | undefined;
        strategy?: "fixed" | "absolute" | undefined;
        open?: boolean | undefined;
        yOnly?: boolean | undefined;
    } & {
        items: (LinkType & {
            [propName: string]: any;
        })[];
        full: boolean;
        ulClass: string;
    };
    events: {
        show: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {
            item: LinkType & {
                [propName: string]: any;
            };
        };
        extra: {};
    };
};
export type MegaMenuProps = typeof __propDef.props;
export type MegaMenuEvents = typeof __propDef.events;
export type MegaMenuSlots = typeof __propDef.slots;
/**
 * [Go to docs](https://flowbite-svelte.com/)
 * ## Props
 * @prop export let items: LinkTypeLike[] = [];
 * @prop export let full: boolean = false;
 * @prop export let open: boolean = false;
 * @prop export let ulClass: string = 'grid grid-flow-row gap-y-4 md:gap-x-0 auto-col-max auto-row-max';
 */
export default class MegaMenu extends SvelteComponent<MegaMenuProps, MegaMenuEvents, MegaMenuSlots> {
}
export {};
//# sourceMappingURL=MegaMenu.svelte.d.ts.map